// Code generated by "stringer -linecomment -output container\flv\strings.go --type TagType,FrameType,CodecID,SoundFormat,SoundRate,SoundSize,SoundType container\flv\flv.go"; DO NOT EDIT.

package flv

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TagAudio-8]
	_ = x[TagVideo-9]
	_ = x[TagScript-18]
}

const (
	_TagType_name_0 = "AudioVideo"
	_TagType_name_1 = "Script"
)

var (
	_TagType_index_0 = [...]uint8{0, 5, 10}
)

func (i TagType) String() string {
	switch {
	case 8 <= i && i <= 9:
		i -= 8
		return _TagType_name_0[_TagType_index_0[i]:_TagType_index_0[i+1]]
	case i == 18:
		return _TagType_name_1
	default:
		return "TagType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[KeyFrame-1]
	_ = x[InterFrame-2]
	_ = x[DisposableInterFrame-3]
	_ = x[GeneratedKeyFrame-4]
	_ = x[InfoFrame-5]
}

const _FrameType_name = "KeyFrameInterFrameH263 onlyreserved for server use onlyInfoFrame"

var _FrameType_index = [...]uint8{0, 8, 18, 27, 55, 64}

func (i FrameType) String() string {
	i -= 1
	if i >= FrameType(len(_FrameType_index)-1) {
		return "FrameType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _FrameType_name[_FrameType_index[i]:_FrameType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[JPEG-1]
	_ = x[H263-2]
	_ = x[ScreenVideo-3]
	_ = x[On2VP6-4]
	_ = x[On2VP6WithAlpha-5]
	_ = x[ScreenVideoV2-6]
	_ = x[H264-7]
}

const _CodecID_name = "JPEGH263ScreenVideoOn2VP6On2VP6WithAlphaScreenVideoV2H264"

var _CodecID_index = [...]uint8{0, 4, 8, 19, 25, 40, 53, 57}

func (i CodecID) String() string {
	i -= 1
	if i >= CodecID(len(_CodecID_index)-1) {
		return "CodecID(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CodecID_name[_CodecID_index[i]:_CodecID_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LinearPCM-0]
	_ = x[ADPCM-1]
	_ = x[MP3-2]
	_ = x[PCM-3]
	_ = x[Nellymoser16KHzMono-4]
	_ = x[Nellymoser8KHzMono-5]
	_ = x[Nellymoser-6]
	_ = x[G711A-7]
	_ = x[G711U-8]
	_ = x[AAC-10]
	_ = x[Speex-11]
	_ = x[MP38KHz-12]
	_ = x[DeviceSpecificSound-13]
}

const (
	_SoundFormat_name_0 = "LinearPCMADPCMMP3PCMNellymoser16KHzMonoNellymoser8KHzMonoNellymoserG711AG711U"
	_SoundFormat_name_1 = "AACSpeexMP38KHzDeviceSpecificSound"
)

var (
	_SoundFormat_index_0 = [...]uint8{0, 9, 14, 17, 20, 39, 57, 67, 72, 77}
	_SoundFormat_index_1 = [...]uint8{0, 3, 8, 15, 34}
)

func (i SoundFormat) String() string {
	switch {
	case i <= 8:
		return _SoundFormat_name_0[_SoundFormat_index_0[i]:_SoundFormat_index_0[i+1]]
	case 10 <= i && i <= 13:
		i -= 10
		return _SoundFormat_name_1[_SoundFormat_index_1[i]:_SoundFormat_index_1[i+1]]
	default:
		return "SoundFormat(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[_5KHz-0]
	_ = x[_11KHz-1]
	_ = x[_22KHz-2]
	_ = x[_44KHz-3]
}

const _SoundRate_name = "5KHz11KHz22KHz44KHz"

var _SoundRate_index = [...]uint8{0, 4, 9, 14, 19}

func (i SoundRate) String() string {
	if i >= SoundRate(len(_SoundRate_index)-1) {
		return "SoundRate(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SoundRate_name[_SoundRate_index[i]:_SoundRate_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[_8bit-0]
	_ = x[_16bit-1]
}

const _SoundSize_name = "8bit16bit"

var _SoundSize_index = [...]uint8{0, 4, 9}

func (i SoundSize) String() string {
	if i >= SoundSize(len(_SoundSize_index)-1) {
		return "SoundSize(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SoundSize_name[_SoundSize_index[i]:_SoundSize_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Mono-0]
	_ = x[Stereo-1]
}

const _SoundType_name = "MonoStereo"

var _SoundType_index = [...]uint8{0, 4, 10}

func (i SoundType) String() string {
	if i >= SoundType(len(_SoundType_index)-1) {
		return "SoundType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SoundType_name[_SoundType_index[i]:_SoundType_index[i+1]]
}
